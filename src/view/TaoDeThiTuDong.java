/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import models.CauHoi;
import models.CauHoiTracNghiem;
import models.CauHoiTuLuan;
import models.DeThi;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import models.MonHoc;

/**
 *
 * @author HuyLV
 */
public class TaoDeThiTuDong extends javax.swing.JFrame {

    private DeThiMau deDaLuu;
    private ArrayList<DeThi> dsDeThi = new ArrayList<>();
    private DeThi deThi;
    MonHoc monHocSelected;
    private ArrayList<MonHoc> listMonHoc = new ArrayList<>();

    //Nội dung đề thi 
    private String namHoc = "";
    private String tenDeThi = "";
    private String thoiGian = "";
    private String ky = "";
    private String noiDung = "";

    //Mảng lưu số câu theo số chương 
    private int[] soCauChuongTN;
    private int[] soCauChuongTL;

    //ArrayList Các Câu Hỏi :
    private ArrayList<CauHoi> listCauHoi = new ArrayList<>();
    private ArrayList<CauHoiTracNghiem> listTracNghiem = new ArrayList<>();
    private ArrayList<CauHoiTuLuan> listTuLuan = new ArrayList<>();
    private ArrayList<CauHoi> listCauHoiDuocChon = new ArrayList<>();

    //Thành phần được lựa chọn trong cbx
    private int selectedChuong;
    private int selectedDoKho;
    private int selectedCauHoiTrongList;
    
    //model để lưu các câu hỏi hiện ra danhSachCauHoiJList
    private DefaultListModel modelCauHoi = new DefaultListModel();
    private DefaultListModel modelTracNghiem = new DefaultListModel();
    private DefaultListModel modelTuLuan = new DefaultListModel();

    /**
     * Creates new form SinhDeThi
     */
    public TaoDeThiTuDong() {
        initComponents();
        this.setVisible(true);
        this.setTitle("Tạo đề thi tự động");
        this.setLocationRelativeTo(null);
    }

    TaoDeThiTuDong(MonHoc monHocSelected) {
        initComponents();
        this.setVisible(true);
        this.setTitle("Tạo đề thi tự động");
        this.setLocationRelativeTo(null);
        this.monHocSelected = monHocSelected;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupDangDeThi = new javax.swing.ButtonGroup();
        groupHinhThuc = new javax.swing.ButtonGroup();
        groupKy = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel(){
            ImageIcon icon = new ImageIcon("src\\anh\\taodethitudong.jpg");
            public void paintComponent(Graphics g){
                Dimension d = getSize();
                g.drawImage(icon.getImage(), 0, 0, d.width, d.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jLabel13 = new javax.swing.JLabel();
        txtThoiGian = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtNamHoc = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        ky1 = new javax.swing.JRadioButton();
        ky2 = new javax.swing.JRadioButton();
        kyHe = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        txtTenDeThi = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel(){
            ImageIcon icon = new ImageIcon("src\\anh\\SinhDeThi.png");
            public void paintComponent(Graphics g){
                Dimension d = getSize();
                g.drawImage(icon.getImage(), 0, 0, d.width, d.height, null);
                setOpaque(false);
                super.paintComponent(g);
            }
        };
        jLabel1 = new javax.swing.JLabel();
        rdbDangTracNghiem = new javax.swing.JRadioButton();
        rdbDangTuLuan = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        spinnerSoCau = new javax.swing.JSpinner();
        ckbSoCauMoiChuong = new javax.swing.JCheckBox();
        cbxChuong = new javax.swing.JComboBox<>();
        txtTracNghiem = new javax.swing.JTextField();
        cbxDoKho = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtTuLuan = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDanhSachCauHoi = new javax.swing.JList<>();
        btnTaoDeThi = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        btnXoaCauHoi = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNoiDungDeThi = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        btnXaoTron = new javax.swing.JButton();
        btnXuaFile = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        btnLuuDeThi = new javax.swing.JButton();
        btnXoaDeThi = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        rdbDangTracNghiemVaTuLuan = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sinh Đề Thi Tự Động @HuyLV");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 204));
        jLabel13.setText("Thời gian :");

        txtThoiGian.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        txtThoiGian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThoiGianActionPerformed(evt);
            }
        });
        txtThoiGian.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtThoiGianKeyReleased(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Phút.");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 204));
        jLabel15.setText("Năm học:");

        txtNamHoc.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        txtNamHoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNamHocKeyReleased(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 204));
        jLabel16.setText("Kỳ:");

        groupKy.add(ky1);
        ky1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ky1.setText("1");
        ky1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ky1ItemStateChanged(evt);
            }
        });
        ky1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ky1ActionPerformed(evt);
            }
        });

        groupKy.add(ky2);
        ky2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ky2.setText("2");
        ky2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ky2ItemStateChanged(evt);
            }
        });

        groupKy.add(kyHe);
        kyHe.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        kyHe.setSelected(true);
        kyHe.setText("Hè");
        kyHe.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kyHeItemStateChanged(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 204));
        jLabel10.setText("Tên đề thi :");

        txtTenDeThi.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Dạng đề thi :");

        groupDangDeThi.add(rdbDangTracNghiem);
        rdbDangTracNghiem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbDangTracNghiem.setSelected(true);
        rdbDangTracNghiem.setText("Trắc nghiệm");
        rdbDangTracNghiem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbDangTracNghiemItemStateChanged(evt);
            }
        });
        rdbDangTracNghiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbDangTracNghiemActionPerformed(evt);
            }
        });

        groupDangDeThi.add(rdbDangTuLuan);
        rdbDangTuLuan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbDangTuLuan.setText("Tự luận");
        rdbDangTuLuan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbDangTuLuanItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("Số câu :");

        spinnerSoCau.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        ckbSoCauMoiChuong.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ckbSoCauMoiChuong.setForeground(new java.awt.Color(0, 0, 204));
        ckbSoCauMoiChuong.setText("Số lượng câu hỏi mỗi chương :");
        ckbSoCauMoiChuong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckbSoCauMoiChuongItemStateChanged(evt);
            }
        });

        cbxChuong.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        cbxChuong.setForeground(new java.awt.Color(0, 102, 102));
        cbxChuong.setEnabled(false);
        cbxChuong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxChuongItemStateChanged(evt);
            }
        });
        cbxChuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxChuongActionPerformed(evt);
            }
        });

        txtTracNghiem.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        txtTracNghiem.setText("0");
        txtTracNghiem.setEnabled(false);
        txtTracNghiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTracNghiemMouseClicked(evt);
            }
        });
        txtTracNghiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTracNghiemKeyReleased(evt);
            }
        });

        cbxDoKho.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        cbxDoKho.setForeground(new java.awt.Color(0, 102, 102));
        cbxDoKho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ngẫu nhiên", "Dễ", "Trung Bình", "Khó" }));
        cbxDoKho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDoKhoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Trắc nghiệm :");

        txtTuLuan.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        txtTuLuan.setText("0");
        txtTuLuan.setEnabled(false);
        txtTuLuan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTuLuanMouseClicked(evt);
            }
        });
        txtTuLuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTuLuanActionPerformed(evt);
            }
        });
        txtTuLuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTuLuanKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Tự luận :");
        jLabel6.setPreferredSize(new java.awt.Dimension(63, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 204));
        jLabel11.setText("Danh sách các câu trong đề");

        jListDanhSachCauHoi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDanhSachCauHoiMouseClicked(evt);
            }
        });
        jListDanhSachCauHoi.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDanhSachCauHoiValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListDanhSachCauHoi);

        btnTaoDeThi.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnTaoDeThi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/create.png"))); // NOI18N
        btnTaoDeThi.setText("Tạo đề thi");
        btnTaoDeThi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoDeThiActionPerformed(evt);
            }
        });

        upButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/up.png"))); // NOI18N
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/down.png"))); // NOI18N
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        btnXoaCauHoi.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnXoaCauHoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/delete.png"))); // NOI18N
        btnXoaCauHoi.setText("Xóa câu hỏi");
        btnXoaCauHoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaCauHoiActionPerformed(evt);
            }
        });

        txtNoiDungDeThi.setColumns(20);
        txtNoiDungDeThi.setRows(5);
        jScrollPane2.setViewportView(txtNoiDungDeThi);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnXaoTron.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXaoTron.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/xaotroncauhoi.png"))); // NOI18N
        btnXaoTron.setText("Xáo trộn các câu hỏi");
        btnXaoTron.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXaoTronActionPerformed(evt);
            }
        });

        btnXuaFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXuaFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/xuatdethi.png"))); // NOI18N
        btnXuaFile.setText("Xuất ra file");
        btnXuaFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuaFileActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 204));
        jLabel12.setText("Nội dung đề thi");

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/back.png"))); // NOI18N
        jButton8.setText("Trở về");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        btnLuuDeThi.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnLuuDeThi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/luu.png"))); // NOI18N
        btnLuuDeThi.setText("Lưu đề thi");
        btnLuuDeThi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuDeThiActionPerformed(evt);
            }
        });

        btnXoaDeThi.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnXoaDeThi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anh/delete.png"))); // NOI18N
        btnXoaDeThi.setText("Xóa đề thi");
        btnXoaDeThi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaDeThiActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("Độ Khó: ");

        groupDangDeThi.add(rdbDangTracNghiemVaTuLuan);
        rdbDangTracNghiemVaTuLuan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbDangTracNghiemVaTuLuan.setText("Trắc Nghiệm & Tự Luận");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jButton8)
                                                .addGap(9, 9, 9)
                                                .addComponent(btnXoaCauHoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jScrollPane1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(14, 14, 14))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(btnXaoTron, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnXuaFile, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel12)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(btnLuuDeThi, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnXoaDeThi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnTaoDeThi))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(ckbSoCauMoiChuong)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(121, 121, 121)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(spinnerSoCau, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(rdbDangTracNghiem)
                                                .addGap(18, 18, 18)
                                                .addComponent(rdbDangTuLuan)))))
                                .addGap(102, 102, 102)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdbDangTracNghiemVaTuLuan)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxDoKho, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(cbxChuong, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTracNghiem, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTuLuan, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)))))))
                .addGap(2, 2, 2))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbDangTracNghiem)
                    .addComponent(rdbDangTuLuan)
                    .addComponent(rdbDangTracNghiemVaTuLuan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerSoCau, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxDoKho, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTracNghiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTuLuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxChuong)
                    .addComponent(ckbSoCauMoiChuong))
                .addGap(19, 19, 19)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downButton)
                        .addGap(0, 167, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnXuaFile)
                                    .addComponent(btnXaoTron))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTaoDeThi)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnLuuDeThi)
                                .addComponent(btnXoaDeThi))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnXoaCauHoi))))
                    .addComponent(jSeparator2))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnXoaCauHoi, downButton, upButton});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnXaoTron, btnXuaFile});

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtThoiGian, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNamHoc))
                    .addComponent(txtTenDeThi, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ky1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ky2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kyHe)
                .addGap(25, 25, 25))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtThoiGian, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNamHoc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ky1)
                    .addComponent(ky2)
                    .addComponent(kyHe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenDeThi, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtThoiGianKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtThoiGianKeyReleased
        thoiGian = txtThoiGian.getText();
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
    }//GEN-LAST:event_txtThoiGianKeyReleased

    private void txtNamHocKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNamHocKeyReleased
        // TODO add your handling code here:
        namHoc = txtNamHoc.getText();
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
    }//GEN-LAST:event_txtNamHocKeyReleased

    private void ky1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ky1ItemStateChanged
        // TODO add your handling code here:
        ky = "1";
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));

    }//GEN-LAST:event_ky1ItemStateChanged

    private void ky2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ky2ItemStateChanged
        // TODO add your handling code here:
        ky = "2";
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
    }//GEN-LAST:event_ky2ItemStateChanged

    private void kyHeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kyHeItemStateChanged
        // TODO add your handling code here:
        ky = "Hè";
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));

    }//GEN-LAST:event_kyHeItemStateChanged

    private void ky1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ky1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ky1ActionPerformed

    private void txtThoiGianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThoiGianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtThoiGianActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void btnXoaDeThiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaDeThiActionPerformed
        // TODO add your handling code here:
        listCauHoi = new ArrayList<>();
        listTracNghiem = new ArrayList<>();
        listTuLuan = new ArrayList<>();
        listCauHoiDuocChon = new ArrayList<>();
        modelCauHoi = new DefaultListModel();
        modelTracNghiem = new DefaultListModel();
        modelTuLuan = new DefaultListModel();
        txtNoiDungDeThi.setText("");
        txtNamHoc.setText("");
        txtTenDeThi.setText("");
        txtThoiGian.setText("");
        jListDanhSachCauHoi.setModel(modelCauHoi);
        spinnerSoCau.setValue(0);
    }//GEN-LAST:event_btnXoaDeThiActionPerformed

    private void btnLuuDeThiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuDeThiActionPerformed

        dsDeThi = monHocSelected.getDsDeThi();

        if (kiemTra()) {

            //kiểm tra đã có đề thi chưa
            int count = 0;
            for (DeThi deThi : dsDeThi) {
                if (deThi.getTenDe().equals(txtTenDeThi.getText())) {
                    count++;
                    JOptionPane.showMessageDialog(null, "ĐỀ THI ĐÃ TỒN TẠI");
                    break;
                }
            }

            if (count == 0) {
                //thêm đề thi mới
                DeThi deThi = new DeThi();
                ArrayList<CauHoiTracNghiem> tnTemp = new ArrayList<>();
                for (CauHoi cauHoi : listCauHoiDuocChon) {
                    if (cauHoi instanceof CauHoiTracNghiem) {
                        tnTemp.add((CauHoiTracNghiem) cauHoi);
                    }
                }
                ArrayList<CauHoiTuLuan> tlTemp = new ArrayList<>();

                for (CauHoi cauHoi : listCauHoi) {
                    if (cauHoi instanceof CauHoiTuLuan) {
                        tlTemp.add((CauHoiTuLuan) cauHoi);
                    }
                }
                deThi.setDsCauHoiTN(tnTemp);
                deThi.setDsCauHoiTL(tlTemp);
                deThi.setTenDe(txtTenDeThi.getText());
                deThi.setNamHoc(txtNamHoc.getText());
                deThi.setThoiGian(Integer.parseInt(txtThoiGian.getText()));
                if (ky1.isSelected()) {
                    ky = "1";
                } else if (ky2.isSelected()) {
                    ky = "2";
                } else {
                    ky = "hè";
                }
                deThi.setKyHoc(ky);
                dsDeThi.add(deThi);
                monHocSelected.setDsDeThi(dsDeThi);

                readDanhSachMonHoc();
                for (MonHoc monHoc : listMonHoc) {
                    if (monHoc.getTenMonHoc().equals(monHocSelected.getTenMonHoc())) {
                        int index = listMonHoc.indexOf(monHoc);
                        listMonHoc.set(index, monHocSelected);
                        writeListMonHoc();
                        JOptionPane.showMessageDialog(null, "Đã cập nhật thành công !");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnLuuDeThiActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
        new XayDungDeThi(monHocSelected);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void btnXuaFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuaFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileSave = new JFileChooser();
        fileSave.showSaveDialog(this);
        if (fileSave.getSelectedFile() == null) {
            return;
        }
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(fileSave.getSelectedFile() + ".doc");
            Writer writer = new java.io.OutputStreamWriter(fileOutputStream, "utf8");
            try (BufferedWriter bw = new BufferedWriter(writer)) {
                bw.write(this.txtNoiDungDeThi.getText());
            }
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_btnXuaFileActionPerformed

    private void btnXaoTronActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXaoTronActionPerformed
        try {
            noiDung = "";
            if (modelCauHoi.size() == 0) {
                return;
            }
            ArrayList<String> shuffleList = new ArrayList<String>();
            for (int i = 0; i < modelCauHoi.size(); i++) {
                shuffleList.add(modelCauHoi.get(i).toString());
            }
            Collections.shuffle(shuffleList);
            modelCauHoi.clear();
            for (String shuffle : shuffleList) {
                modelCauHoi.addElement(shuffle);
            }
            // hiện thị lại đề thì sau khi đã xáo trộn
            for (int i = 0; i < modelCauHoi.size(); i++) {
                String selectedCauHoi = modelCauHoi.getElementAt(i).toString();
                for (CauHoiTracNghiem tracNghiem : this.listTracNghiem) {
                    if (tracNghiem.getDeBai().equalsIgnoreCase(selectedCauHoi)) {
                        noiDung += "Câu " + (i + 1) + ":\n" + tracNghiem.inCauHoi();
                        break;
                    }
                }
                for (CauHoiTuLuan tuLuan : this.listTuLuan) {
                    if (tuLuan.getDeBai().equalsIgnoreCase(selectedCauHoi)) {
                        noiDung += "Câu " + (i + 1) + ":\n" + tuLuan.inCauHoi();
                        break;
                    }
                }
            }
            txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
            jListDanhSachCauHoi.setModel(modelCauHoi);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Danh sách rỗng!");
        }
    }//GEN-LAST:event_btnXaoTronActionPerformed

    private void btnXoaCauHoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaCauHoiActionPerformed
        if (modelCauHoi != null && modelCauHoi.size() == 0) {
            return;
        }
        int i;
        noiDung = "";
        if (listTracNghiem != null) {
            for (i = 0; i < listTracNghiem.size(); i++) {
                CauHoiTracNghiem tracNghiem = listTracNghiem.get(i);
                try {
                    if (tracNghiem.getDeBai().equalsIgnoreCase(jListDanhSachCauHoi.getSelectedValue())) {
                        break;
                    }
                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Bạn chưa chọn câu để xóa");
                    return;
                }
            }
            if (i < listTracNghiem.size()) {
                listTracNghiem.remove(i);
            }
        }

        if (listTuLuan != null) {
            for (i = 0; i < listTuLuan.size(); i++) {
                CauHoiTuLuan tuLuan = listTuLuan.get(i);
                try {
                    if (tuLuan.getDeBai().equalsIgnoreCase(jListDanhSachCauHoi.getSelectedValue())) {
                        break;
                    }
                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Bạn chưa chọn câu để xóa");
                }
            }
            if (i < listTuLuan.size()) {
                listTuLuan.remove(i);
            }
        }
        if (modelCauHoi != null) {
            modelCauHoi.remove(jListDanhSachCauHoi.getSelectedIndex());
            // hiển thị lại đề thi sau khi đã xóa câu hỏi
            for (i = 0; i < modelCauHoi.size(); i++) {
                String selectedCauHoi = modelCauHoi.getElementAt(i).toString();
                if (this.listTracNghiem != null) {
                    for (CauHoiTracNghiem tracNghiem : listTracNghiem) {
                        if (tracNghiem.getDeBai().equalsIgnoreCase(selectedCauHoi)) {
                            noiDung += "Câu " + (i + 1) + ":\r\n" + tracNghiem.inCauHoi();
                        }
                    }
                }
                if (this.listTuLuan != null) {
                    for (CauHoiTuLuan tuLuan : listTuLuan) {
                        if (tuLuan.getDeBai().equalsIgnoreCase(selectedCauHoi)) {
                            noiDung += "Câu " + (i + 1) + ":\n" + tuLuan.inCauHoi();
                        }
                    }
                }
            }
            txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
            jListDanhSachCauHoi.setModel(modelCauHoi);
        }
    }//GEN-LAST:event_btnXoaCauHoiActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        try {
            int i = selectedCauHoiTrongList;
            if (i < modelCauHoi.size() - 1) {
                //Thay đổi Jlist
                String up = (String) modelCauHoi.get(i);
                String down = (String) modelCauHoi.get(i + 1);
                modelCauHoi.remove(i + 1);
                modelCauHoi.remove(i);
                modelCauHoi.add(i, down);
                modelCauHoi.add(i + 1, up);
                jListDanhSachCauHoi.setModel(modelCauHoi);
                selectedCauHoiTrongList = i + 1;
                // Thay đổi nội dung đề thi
                CauHoi cauDuoi = listCauHoiDuocChon.remove(i + 1);
                CauHoi cauTren = listCauHoiDuocChon.remove(i);
                listCauHoiDuocChon.add(i, cauDuoi);
                listCauHoiDuocChon.add(i + 1, cauTren);
                noiDung = "";
                setNoiDungDeThi();
                jListDanhSachCauHoi.setSelectedIndex(i + 1);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Danh sách rỗng!");
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        //Di chuyển câu được chọn đi lên
        try {
            int i = selectedCauHoiTrongList;
            if (i > 0) {
                String down = (String) modelCauHoi.get(i);
                String up = (String) modelCauHoi.get(i - 1);
                // Thay đổi Jlist
                modelCauHoi.remove(i);
                modelCauHoi.remove(i - 1);
                modelCauHoi.add(i - 1, down);
                modelCauHoi.add(i, up);
                selectedCauHoiTrongList = i - 1;
                jListDanhSachCauHoi.setModel(modelCauHoi);
                // Thay đổi nội dung đề thi.
                CauHoi cauDuoi = listCauHoiDuocChon.remove(i);
                CauHoi cauTren = listCauHoiDuocChon.remove(i - 1);
                listCauHoiDuocChon.add(i - 1, cauDuoi);
                listCauHoiDuocChon.add(i, cauTren);
                noiDung = "";
                setNoiDungDeThi();
                jListDanhSachCauHoi.setSelectedIndex(i - 1);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Danh sách rỗng!");
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void btnTaoDeThiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoDeThiActionPerformed
        int soCauTN = 0, soCauTL = 0, tongSoCau, tongSoCauChuong = 0;
        listCauHoi = new ArrayList<>();
        listTracNghiem = new ArrayList<>();
        listTuLuan = new ArrayList<>();
        listCauHoiDuocChon = new ArrayList<>();
        modelCauHoi = new DefaultListModel();
        modelTracNghiem = new DefaultListModel();
        modelTuLuan = new DefaultListModel();
        txtNoiDungDeThi.setText("");
        noiDung = "";
        tongSoCau = (int) spinnerSoCau.getValue();
        if (kiemTra()) { // Kiểm tra các trường đã nhập đủ chưa.
            Random random = new Random();
            // tính tổng số câu theo chương
            if (ckbSoCauMoiChuong.isSelected()) {
                for (int i = 0; i < monHocSelected.getSoChuong(); i++) {
                    tongSoCauChuong += soCauChuongTL[i] + soCauChuongTN[i];
                    soCauTN += soCauChuongTN[i];
                    soCauTL += soCauChuongTL[i];
                }
            }
            String doKho = cbxDoKho.getSelectedItem().toString().trim();

            if (rdbDangTracNghiem.isSelected()) { //Tạo đề thi trắc nghiệm
                listTracNghiem = monHocSelected.getDsCauHoiTN();
                for(CauHoiTracNghiem tracNghiem : listTracNghiem) {
                    listCauHoi.add(tracNghiem);
                }
                int idRandom;
                if (!doKho.equals("Ngẫu nhiên")) { //Xây dựng đề thi  có độ khó
                    if (ckbSoCauMoiChuong.isSelected()) { //Xây dựng đề thi có chọn số câu mỗi chương và có độ khó
                        if (tongSoCau != tongSoCauChuong) { // kiểm tra tổng số câu và tổng số theo chương có bằng nhau ?
                            JOptionPane.showMessageDialog(null, "Tổng số câu hỏi và số chương khác nhau");
                            return;
                        }
                        else {
                            //Lấy random câu hỏi và kiểm tra độ khó
                            while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                                idRandom = random.nextInt(listCauHoi.size());
                                if (listCauHoi.get(idRandom).getDoKho().equals(doKho) && soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) { //Số câu của chương [số chương -1] (index của chương)
                                    listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                    modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                    // modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                    soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1]--;
                                    tongSoCau--;
                                }
                                listCauHoi.remove(listCauHoi.get(idRandom));
                            }
                        }
                    }
                    else { // Xây dựng đề trắc nghiệm với độ khó và không yêu cầu chương.
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());

                            if (listCauHoi.get(idRandom).getDoKho().equalsIgnoreCase(doKho)) {
                                listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                //modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                tongSoCau--;
                            }
                            listCauHoi.remove(listCauHoi.get(idRandom));
                        }
                    }
                }
                else {// Tạo đề thi trắc nghiệm số câu bất kỳ không theo độ khó
                    if (ckbSoCauMoiChuong.isSelected()) {//Xây dựng đề thi có chọn số câu mỗi chương
                        // kiểm tra tổng số câu và tổng số theo chương có bằng nhau ?
                        if (tongSoCau != tongSoCauChuong) {
                            JOptionPane.showMessageDialog(null, "Tổng số câu hỏi và số chương khác nhau");
                            return;
                        } else if (tongSoCau == tongSoCauChuong) {
                            //Lấy random câu hỏi
                            while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                                idRandom = random.nextInt(listCauHoi.size());
                                if (soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {// Số câu chương[chương-1]
                                    listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                    modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                    // modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                    soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1]--;
                                    tongSoCau--;
                                }
                                listCauHoi.remove(listCauHoi.get(idRandom));
                            }
                        }
                    } else {//Đế thi không chọn số câu mỗi chương với số câu bất kỳ không theo độ khó
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());
                            listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                            modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                            // modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                            tongSoCau--;
                            listCauHoi.remove(listCauHoi.get(idRandom));
                        }
                    }
                }
            } else if (rdbDangTuLuan.isSelected()) {        // tạo đề thi tự luận
                int idRandom;
                listTuLuan = monHocSelected.getDsCauHoiTL();
                for(CauHoiTuLuan tuLuan : listTuLuan) {
                    listCauHoi.add(tuLuan);
                }
                if (!doKho.equals("Ngẫu nhiên")) { // Đề thi tự luận có độ khó
                    if (ckbSoCauMoiChuong.isSelected()) { // Đề tự luận có độ khó và chọn số câu mỗi chương
                        if (tongSoCau != tongSoCauChuong) {
                            JOptionPane.showMessageDialog(null, "Tổng số câu hỏi và số chương khác nhau");
                        } else {
                            while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                                idRandom = random.nextInt(listCauHoi.size());
                                if (doKho.equals(listCauHoi.get(idRandom).getDoKho()) && soCauChuongTL[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {
                                    listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                    modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                    //    modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                    tongSoCau--;
                                }
                                listCauHoi.remove(listCauHoi.get(idRandom));
                            }
                        }
                    } else { // Đề tự luận có độ khó và không yêu cầu chương
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());
                            if (listCauHoi.get(idRandom).getDoKho().equals(doKho)) {
                                listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                //   modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                tongSoCau--;
                            }
                            listCauHoi.remove(listCauHoi.get(idRandom));
                        }

                    }
                } else { // Đề thi tự luận không độ khó
                    if (ckbSoCauMoiChuong.isSelected()) {//Đề tự luận không độ khó nhưng chọn theo chương
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());
                            if (soCauChuongTL[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {
                                listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                //    modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                tongSoCau--;
                            }
                            listCauHoi.remove(listCauHoi.get(idRandom));
                        }
                    } else {
                        // Đề tự luận không độ khó không theo chương .
                        modelCauHoi = new DefaultListModel();
                        listCauHoiDuocChon = new ArrayList<>();
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());
                            System.out.println(listCauHoi.size());
                            System.out.println(idRandom);
                            listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                            modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                            //  modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                            tongSoCau--;
                            listCauHoi.remove(listCauHoi.get(idRandom));
                        }

                    }
                }
            } else {//Tạo đề thi cả tự luận và trắc nghiệm
                listTracNghiem = monHocSelected.getDsCauHoiTN();
                listTuLuan = monHocSelected.getDsCauHoiTL();
                for(CauHoiTracNghiem tracNghiem : listTracNghiem) {
                    listCauHoi.add(tracNghiem);
                }
                for(CauHoiTuLuan tuLuan : listTuLuan) {
                    listCauHoi.add(tuLuan);
                }
                int idRandom;
                int sizeTN = listTracNghiem.size();
                if (!doKho.equals("Ngẫu nhiên")) {//Đề thi có chọn độ khó
                    if (ckbSoCauMoiChuong.isSelected()) {//Đề thi chọn độ khó và yêu cầu chương
                        if (tongSoCau != tongSoCauChuong) {
                            JOptionPane.showMessageDialog(null, "Tổng số câu hỏi và số chương khác nhau");
                        } else {
                            while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                                idRandom = random.nextInt(listCauHoi.size());
                                if (idRandom < sizeTN && listCauHoi.get(idRandom).getDoKho().equals(doKho) && soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {
                                    listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                    modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                    modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                    tongSoCau--;
                                    listCauHoi.remove(listCauHoi.get(idRandom));
                                    soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1]--;
                                } else {
                                    if (listCauHoi.get(idRandom).getDoKho().equals(doKho) && soCauChuongTL[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {
                                        listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                        modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                        modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                        tongSoCau--;
                                        listCauHoi.remove(listCauHoi.get(idRandom));
                                        soCauChuongTL[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1]--;
                                    }
                                }
                            }
                        }
                    } else {// Đề thi chọn độ khó nhưng không yêu cầu chương
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());
                            if (idRandom < sizeTN && listCauHoi.get(idRandom).getDoKho().equals(doKho)) {
                                listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                tongSoCau--;
                                listCauHoi.remove(listCauHoi.get(idRandom));
                            } else {
                                if (listCauHoi.get(idRandom).getDoKho().equals(doKho)) {
                                    listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                    modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                    modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                    tongSoCau--;
                                    listCauHoi.remove(listCauHoi.get(idRandom));
                                }
                            }
                        }
                    }
                } else {//Đề thi không chọn độ khó
                    if (ckbSoCauMoiChuong.isSelected()) {// đề thi không chọn độ khó nhưng yêu cầu chương
                        if (tongSoCau != tongSoCauChuong) {
                            JOptionPane.showMessageDialog(null, "Tổng số câu hỏi và số chương khác nhau");
                        } else {
                            while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                                idRandom = random.nextInt(listCauHoi.size());
                                if (idRandom < sizeTN && soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {
                                    listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                    modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                    modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                    tongSoCau--;
                                    listCauHoi.remove(listCauHoi.get(idRandom));
                                    soCauChuongTN[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1]--;
                                } else {
                                    if (soCauChuongTL[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1] > 0) {
                                        listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                        modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                        modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                        tongSoCau--;
                                        listCauHoi.remove(listCauHoi.get(idRandom));
                                        soCauChuongTL[Character.getNumericValue(listCauHoi.get(idRandom).getChuong().charAt(7)) - 1]--;
                                    }
                                }
                            }
                        }
                    } else { // Đề thi không chọn độ khó không yêu cầu chương .
                        while (tongSoCau > 0 && !listCauHoi.isEmpty()) {
                            idRandom = random.nextInt(listCauHoi.size());
                            if (idRandom < sizeTN) {
                                listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                modelTracNghiem.addElement(listCauHoi.get(idRandom).getDeBai());
                                tongSoCau--;
                                listCauHoi.remove(listCauHoi.get(idRandom));
                            } else {
                                listCauHoiDuocChon.add(listCauHoi.get(idRandom));
                                modelCauHoi.addElement(listCauHoi.get(idRandom).getDeBai());
                                modelTuLuan.addElement(listCauHoi.get(idRandom).getDeBai());
                                tongSoCau--;
                                listCauHoi.remove(listCauHoi.get(idRandom));
                            }
                        }
                    }
                }
            }
            // Kiểm tra và show vào textArea
            if (tongSoCau != 0 && listCauHoi.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Không có đủ đề bài cho yêu cầu của bạn");
            } 
//            else if (rdbHinhThucRieng.isSelected()) {
//                setNoiDungDeRieng();
//                jListDanhSachCauHoi.setModel(modelCauHoi);
//                JOptionPane.showMessageDialog(null, "Đã tạo đề thi thành công !");
//            } 
            else {
                modelCauHoi = sapXepLaiModelCauHoi(modelCauHoi);
                jListDanhSachCauHoi.setModel(modelCauHoi);
                setNoiDungDeThi();
                JOptionPane.showMessageDialog(null, "Đã tạo đề thi thành công !");
            }
        }
    }//GEN-LAST:event_btnTaoDeThiActionPerformed

    private void jListDanhSachCauHoiValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDanhSachCauHoiValueChanged
        // Xác định chỉ số của câu đang được chọn
        selectedCauHoiTrongList = jListDanhSachCauHoi.getSelectedIndex();
    }//GEN-LAST:event_jListDanhSachCauHoiValueChanged

    private void jListDanhSachCauHoiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDanhSachCauHoiMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jListDanhSachCauHoiMouseClicked

    private void txtTuLuanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTuLuanKeyReleased
        // Số câu tự luận của chương tương ứng :
        selectedChuong = cbxChuong.getSelectedIndex();
        try {
            soCauChuongTL[selectedChuong] = Integer.parseInt(txtTuLuan.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Điền vào một số !");
        }
    }//GEN-LAST:event_txtTuLuanKeyReleased

    private void txtTuLuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTuLuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTuLuanActionPerformed

    private void txtTuLuanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTuLuanMouseClicked
        // TODO add your handling code here:
        txtTuLuan.setText("");
    }//GEN-LAST:event_txtTuLuanMouseClicked

    private void cbxDoKhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDoKhoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxDoKhoActionPerformed

    private void txtTracNghiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTracNghiemKeyReleased
        // Số câu trắc nghiệm của chương tương ứng
        selectedChuong = cbxChuong.getSelectedIndex();
        try {
            soCauChuongTN[selectedChuong] = Integer.parseInt(txtTracNghiem.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Điền vào một số !");
        }
    }//GEN-LAST:event_txtTracNghiemKeyReleased

    private void txtTracNghiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTracNghiemMouseClicked
        // TODO add your handling code here:
        txtTracNghiem.setText("");
    }//GEN-LAST:event_txtTracNghiemMouseClicked

    private void cbxChuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxChuongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxChuongActionPerformed

    private void cbxChuongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxChuongItemStateChanged
        selectedChuong = cbxChuong.getSelectedIndex();
        txtTracNghiem.setText(Integer.toString(soCauChuongTN[selectedChuong]));
        txtTuLuan.setText(Integer.toString(soCauChuongTL[selectedChuong]));
    }//GEN-LAST:event_cbxChuongItemStateChanged

    private void ckbSoCauMoiChuongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckbSoCauMoiChuongItemStateChanged
        // Bật tắt các thông tin khi chọn checkbox số câu của chương
        if (ckbSoCauMoiChuong.isSelected() == false) {
            txtTracNghiem.setText("0");
            txtTuLuan.setText("0");
            txtTracNghiem.setEnabled(false);
            txtTuLuan.setEnabled(false);
            cbxChuong.setEnabled(false);
        }

        if (ckbSoCauMoiChuong.isSelected() == true) {
            soCauChuongTL = new int[monHocSelected.getSoChuong()];
            soCauChuongTN = new int[monHocSelected.getSoChuong()];
            if (rdbDangTracNghiem.isSelected() == true) {
                txtTracNghiem.setText("0");
                txtTuLuan.setText("0");
                txtTracNghiem.setEnabled(true);
                txtTuLuan.setEnabled(false);
                cbxChuong.setEnabled(true);
                for (int i = 0; i < monHocSelected.getSoChuong(); i++) {
                    cbxChuong.addItem("Chương " + (i + 1));
                }
            }
            else if (rdbDangTuLuan.isSelected() == true) {
                txtTracNghiem.setText("0");
                txtTuLuan.setText("0");
                txtTracNghiem.setEnabled(false);
                txtTuLuan.setEnabled(true);
                cbxChuong.setEnabled(true);
                for (int i = 0; i < monHocSelected.getSoChuong(); i++) {
                    cbxChuong.addItem("Chương " + (i + 1));
                }
            }
            else {
                txtTracNghiem.setText("0");
                txtTuLuan.setText("0");
                txtTracNghiem.setEnabled(true);
                txtTuLuan.setEnabled(true);
                cbxChuong.setEnabled(true);
                for (int i = 0; i < monHocSelected.getSoChuong(); i++) {
                    cbxChuong.addItem("Chương " + (i + 1));
                }
            }

        }
    }//GEN-LAST:event_ckbSoCauMoiChuongItemStateChanged

    private void rdbDangTuLuanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbDangTuLuanItemStateChanged
        // TODO add your handling code here:
        txtTracNghiem.setText("0");
        txtTuLuan.setText("0");
//        rdbHinhThucChung.setEnabled(false);
//        rdbHinhThucRieng.setEnabled(false);
        if (this.ckbSoCauMoiChuong.isSelected()) {
            txtTracNghiem.setEnabled(false);
            txtTuLuan.setEnabled(true);
        }
    }//GEN-LAST:event_rdbDangTuLuanItemStateChanged

    private void rdbDangTracNghiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbDangTracNghiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbDangTracNghiemActionPerformed

    private void rdbDangTracNghiemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbDangTracNghiemItemStateChanged
        // Chọn Trắc Nghiệm Tắt Tự Luận
        txtTracNghiem.setText("0");
        txtTuLuan.setText("0");
//        rdbHinhThucChung.setEnabled(false);
//        rdbHinhThucRieng.setEnabled(false);
        if (this.ckbSoCauMoiChuong.isSelected()) {
            txtTracNghiem.setEnabled(true);
            txtTuLuan.setEnabled(false);
        }
    }//GEN-LAST:event_rdbDangTracNghiemItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaoDeThiTuDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaoDeThiTuDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaoDeThiTuDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaoDeThiTuDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaoDeThiTuDong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLuuDeThi;
    private javax.swing.JButton btnTaoDeThi;
    private javax.swing.JButton btnXaoTron;
    private javax.swing.JButton btnXoaCauHoi;
    private javax.swing.JButton btnXoaDeThi;
    private javax.swing.JButton btnXuaFile;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JComboBox<String> cbxChuong;
    private javax.swing.JComboBox<String> cbxDoKho;
    private javax.swing.JCheckBox ckbSoCauMoiChuong;
    private javax.swing.JButton downButton;
    private javax.swing.ButtonGroup groupDangDeThi;
    private javax.swing.ButtonGroup groupHinhThuc;
    private javax.swing.ButtonGroup groupKy;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jListDanhSachCauHoi;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton ky1;
    private javax.swing.JRadioButton ky2;
    private javax.swing.JRadioButton kyHe;
    private javax.swing.JRadioButton rdbDangTracNghiem;
    private javax.swing.JRadioButton rdbDangTracNghiemVaTuLuan;
    private javax.swing.JRadioButton rdbDangTuLuan;
    private javax.swing.JSpinner spinnerSoCau;
    private javax.swing.JTextField txtNamHoc;
    private javax.swing.JTextArea txtNoiDungDeThi;
    private javax.swing.JTextField txtTenDeThi;
    private javax.swing.JTextField txtThoiGian;
    private javax.swing.JTextField txtTracNghiem;
    private javax.swing.JTextField txtTuLuan;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    private String setTextNoiDung(String monHoc, String ky, String namHoc, String thoiGian, String noiDung) {
        return "ĐỀ THI MÔN " + monHoc.toUpperCase() + "\r\nMã học phần : " + monHocSelected.getMaHocPhan() + "\t Kỳ: " + ky + " - Năm học: " + namHoc + "\r\nThời gian: " + thoiGian + " phút\n\r" + noiDung;
    }

    private boolean kiemTra() {
        if ((int) spinnerSoCau.getValue() == 0) {
            JOptionPane.showMessageDialog(null, "Chưa chọn tổng số câu!");
            return false;
        }
        if (txtNamHoc.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Điền vào năm học !");
            return false;
        }
        if (txtThoiGian.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Điền vào Thời Gian!");
            return false;
        }
        if (txtTenDeThi.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Điền vào tên đề thi!");
            return false;
        }
        return true;
    }

    private void setNoiDungDeThi() {
        for (int i = 0; i < modelCauHoi.size(); i++) {
            for (int j = 0; j < listTracNghiem.size(); j++) {
                if (listTracNghiem.get(j).getDeBai().equalsIgnoreCase(modelCauHoi.getElementAt(i).toString())) {
                    noiDung += "Câu " + (i + 1) + " :\r " + listTracNghiem.get(j).inCauHoi();
                }
            }
            for (int j = 0; j < listTuLuan.size(); j++) {
                if (listTuLuan.get(j).getDeBai().equalsIgnoreCase(modelCauHoi.getElementAt(i).toString())) {
                    noiDung += "Câu " + (i + 1) + " :\r " + listTuLuan.get(j).inCauHoi();
                }
            }
        }
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
    }

    private void setNoiDungDeRieng() {
        for (int i = 0; i < modelTracNghiem.size(); i++) {
            for (int j = 0; j < listTracNghiem.size(); j++) {
                if (listTracNghiem.get(j).getDeBai().equalsIgnoreCase(modelTracNghiem.getElementAt(i).toString())) {
                    noiDung += "Câu " + (i + 1) + " :\r " + listTracNghiem.get(j).inCauHoi();
                }
            }
        }

        for (int i = modelTracNghiem.size(); i < (modelTuLuan.size() + modelTracNghiem.size()); i++) {
            for (int j = 0; j < listTuLuan.size(); j++) {
                if (listTuLuan.get(j).getDeBai().equalsIgnoreCase(modelTuLuan.getElementAt(i - modelTracNghiem.size()).toString())) {
                    noiDung += "Câu " + (i + 1) + " :\r " + listTuLuan.get(j).inCauHoi();
                }
            }
        }
        txtNoiDungDeThi.setText(setTextNoiDung(monHocSelected.getTenMonHoc(), ky, namHoc, thoiGian, noiDung));
    }

    private void readDanhSachMonHoc() {
        try {
            FileInputStream fileReader = new FileInputStream("DanhSachMonHoc.dat");
            ObjectInputStream inputStream = new ObjectInputStream(fileReader);
            listMonHoc = (ArrayList<MonHoc>) inputStream.readObject();
            inputStream.close();
            fileReader.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(QuanLyMonHoc.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLyMonHoc.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void writeListMonHoc() {
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("DanhSachMonHoc.dat",false);
            ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
            outputStream.writeObject(listMonHoc);
            outputStream.close();
            fileOutputStream.close();
        } catch (IOException e) {
            System.out.println(e.toString());
        }
    }

    private DefaultListModel sapXepLaiModelCauHoi(DefaultListModel model) {
        DefaultListModel modelCauHoi = new DefaultListModel<>();
        for(int i=0;i<model.getSize();++i) {
            for(CauHoiTracNghiem tracNghiem : monHocSelected.getDsCauHoiTN()) {
                if(tracNghiem.getDeBai().toString().equals(model.get(i).toString())) {
                    modelCauHoi.addElement(model.get(i).toString());
                    break;
                }
            }
        }
        for(int i=0;i<model.getSize();++i) {
            for(CauHoiTuLuan tuLuan : monHocSelected.getDsCauHoiTL()) {
                if(tuLuan.getDeBai().toString().equals(model.get(i).toString())) {
                    modelCauHoi.addElement(model.get(i).toString());
                    break;
                }
            }
        }
        return modelCauHoi;
    }

}
